# Исходный список чисел, из которых необходимо выделить элементы с простым или составным значением по спискам
# primes и not_primes соответственно:
numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

# Списки для простых и составных чисел соответственно:
primes = []
not_primes = []

for i in numbers:
    if i < 2:
        continue  # Игнорируем числа меньше 2 (0 и 1), так как они не относятся к простым или составным.

    if i == 2:
        primes.append(i)  # Двойка — единственное чётное простое число, направляем его сразу в соответствующий список.
        continue

    # Остальные чётные числа как минимум дополнительно делятся на 2 без остатка, потому -
    # их мы тоже направляем в составные.
    if i % 2 == 0:
        not_primes.append(i)
        continue
    # Проверяем только нечётные числа:
    else:
        is_prime = True

        # Прочитал в интернете, что для определения простых чисел достаточно проверить лишь первую "половину" числа в
        # качестве его делителей, что, в целом, логично. Ещё прочитал в интернете, что можно даже только до "квадрата"
        # числа проверять, но что-то у меня с этим не сложилось, потому и проверяю первую "половину", тоже за оптимизацию
        # сойдёт :D С тройки range начинаем потому, что наше число точно не является чётным (мы их обрабатываем выше).
        # Ещё один момент: с тройкой и пятёркой выходит забавная ситуация - алгоритм не заходит в for потому, что
        # предел у range оказывается меньше, чем его начало, из-за чего is_prime не имеет возможности даже попытаться
        # перейти в False, а четвёрка не попадает в данный алгоритм из-за предварительного распределения для чётных.
        # Не баг, а фича однако, так и живём :)
        # Шаг последнего цикла увеличен на один, ведь итогами умножения чётных чисел всегда будут чётные числа!
        for j in range(3, i // 2, 2):
            if not j == i and i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
        else:
            not_primes.append(i)
        is_prime = True

print("Простые числа:", primes)
print("Составные числа:", not_primes)
